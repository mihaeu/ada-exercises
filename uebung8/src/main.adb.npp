---------------------------------------------------------------------------
-- Programm    : \Uebung8\erz_verbr.adb
-- Verfasser   : T. Tempelmeier
-- Datum       : 17.10.07 15:47:49
-- Beschreibung: Erzeuger-Verbraucher-Problem mit Flußkontrolle   STACK
--               Einfache Demo-Version
--               In der Praxis: + generisch + eigenes Paket + protected TYPE
-- Änderungen  :
---------------------------------------------------------------------------

with Ada.Text_IO;                          use Ada.Text_IO;
with Ada.Float_Text_IO;                    use Ada.Float_Text_IO;
with Ada.Numerics.Float_Random;            use Ada.Numerics.Float_Random;

procedure Main is

    zufall : array (1..5) of float := (7.0, 3.0, 7.0, 12.0, 1.0);
    rand : Generator;

   size  : constant positive := 10;
   type store_array is array (1 .. size) of float;

   -----------------------------------------------------------

   protected stack is                   -- protected object
      entry push (item : in  float);
      entry pop  (item : out float);
   private
      index : natural := 0;
      store : store_array;
   end stack;


   protected body stack is
      entry push (item : in float) when index < size  is
         begin                      -- falls Stack nicht voll
            index := index + 1;
            store (index) := item;
         end push;
      entry pop (item : out float) when index > 0 is
         begin                      -- falls Stack nicht leer
            item  := store (index);
            index := index -1;
         end pop;
   end stack;

   -- Wechselseitiger Ausschluß ist automatisch sichergestellt
   -- Flußkontrolle ist durch die when-Klauseln sichergestellt

   -----------------------------------------------------------

   task erzeuger;

   task body erzeuger is
      x      : float;
    begin
        reset(rand);
      loop
         -- Empfange irgendwoher Daten oder erzeuge Daten
         x := random(rand);  -- hier: zufälliger Wert

         delay duration(x); -- zufällige Verzögerung der Task
         put ("Erzeuger "); put (x, 5,1,0); new_line;

         -- Speichere Daten im Zwischenpuffer Stack
         stack.push (x);

      end loop;
   end erzeuger;

   -----------------------------------------------------------

   task verbraucher;

   task body verbraucher is
      x      : float;
   begin
      loop

         delay duration(random(rand) * 2.0); -- zufällige Verzögerung der Task

         -- Hole Daten aus Zwischenpuffer Stack
         stack.pop (x);

         -- Verarbeite Daten bzw. verbrauche Daten
         put ("Verbraucher "); put (x, 5,1,0); new_line;

      end loop;
   end verbraucher;

   -----------------------------------------------------------

begin

   put_line ("Die beiden Tasks laufen jetzt los!");

   skip_line;

end Main;
